// prisma schema docs: https://pris.ly/d/prisma-schema 

// run 'npx prisma db push' to push schema changes to planetscale
// run 'npx prisma generate' after a schema change to update the prisma client
// run 'npx prisma format' to auto format

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//---------------------------------------------------------------------------//

/// test comment for AST test
model User {
  id            String         @id // generated by clerk
  events        Event[]
  notifications Notification[]
  messages      Message[]
}

model Event {
  id           String    @id @default(cuid())
  title        String    @db.VarChar(60)
  location     String    @db.VarChar(60)
  createdAt    DateTime  @default(now())
  accessStart  DateTime
  accessEnd    DateTime
  inviteLink   String    @unique @db.VarChar(100)
  verifierCode String    @unique @db.VarChar(14)
  description  String?   @db.VarChar(200)
  invites      Invite[]
  User         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?
  messages     Message[]
}

model Invite {
  id         String    @id @default(cuid())
  scannedAt  DateTime?
  email      String    @db.VarChar(100)
  firstName  String    @db.VarChar(60)
  lastName   String    @db.VarChar(60)
  Event      Event?    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId    String?
  acceptedAt DateTime  @default(now())
}

model Notification {
  id         String   @id @default(cuid())
  content    String   @db.VarChar(200)
  notifiedAt DateTime @default(now())
  User       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?
}

model Message {
  id      String   @id @default(cuid())
  text    String   @db.VarChar(500)
  Event   Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String
  User    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String?
  sentAt  DateTime @default(now())
}
