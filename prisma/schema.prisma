generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id // generated by clerk
  events        Event[]
  notifications Notification[]
  messages      Message[]
  invites       Invite[]

  memberOfOrganizations Organization[] @relation("MemberOfOrganizations")
  adminOfOrganizations  Organization[] @relation("AdminOfOrganizations")
  ownerOfOrganizations  Organization[] @relation("OwnerOfOrganizations")

  @@index([id])
}

model Event {
  id           String    @id @default(cuid())
  title        String    @db.VarChar(60)
  location     String    @db.VarChar(60)
  createdAt    DateTime  @default(now())
  accessStart  DateTime
  accessEnd    DateTime
  inviteLink   String    @unique @db.VarChar(100)
  verifierCode String    @unique @db.VarChar(14)
  description  String?   @db.VarChar(200)
  capacity     Int?
  invites      Invite[]
  User         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  messages     Message[]

  Organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String?

  @@index([userId])
}

model Invite {
  id         String    @id @default(cuid())
  scannedAt  DateTime?
  Event      Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId    String
  User       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  acceptedAt DateTime  @default(now())

  @@index([eventId])
  @@index([userId])
}

model Notification {
  id         String   @id @default(cuid())
  text       String   @db.VarChar(200)
  notifiedAt DateTime @default(now())
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String

  @@index([userId])
}

model Message {
  id      String   @id @default(cuid())
  text    String   @db.VarChar(500)
  Event   Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String
  User    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  sentAt  DateTime @default(now())

  @@index([eventId])
  @@index([userId])
}

model Organization {
  id       String  @id @default(cuid())
  title    String  @db.VarChar(60)
  linkCode String  @unique @db.VarChar(14)
  joinCode String? @unique @db.VarChar(14)

  ownerId String
  owner   User   @relation("OwnerOfOrganizations", fields: [ownerId], references: [id], onDelete: Cascade)
  admins  User[] @relation("AdminOfOrganizations")
  members User[] @relation("MemberOfOrganizations")

  parentOrganizationId String?
  parentOrganization   Organization?  @relation("LinkOrganization", fields: [parentOrganizationId], references: [id], onDelete: Cascade)
  childOrganizations   Organization[] @relation("LinkOrganization")

  events Event[]
}
