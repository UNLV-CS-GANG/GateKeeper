generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String         @id
  events                Event[]
  invites               Invite[]
  messages              Message[]
  notifications         Notification[]
  ownerOfOrganizations  Organization[] @relation("OwnerOfOrganizations")
  adminOfOrganizations  Organization[] @relation("AdminOfOrganizations")
  memberOfOrganizations Organization[] @relation("MemberOfOrganizations")

  @@index([id])
}

model Event {
  id             String        @id @default(cuid())
  title          String        @db.VarChar(60)
  location       String        @db.VarChar(60)
  createdAt      DateTime      @default(now())
  accessStart    DateTime
  accessEnd      DateTime
  inviteLink     String        @unique @db.VarChar(100)
  verifierCode   String        @unique @db.VarChar(14)
  description    String?       @db.VarChar(200)
  capacity       Int?
  userId         String
  organizationId String?
  Organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  User           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  invites        Invite[]
  messages       Message[]

  @@index([userId])
}

model Invite {
  id         String    @id @default(cuid())
  scannedAt  DateTime?
  eventId    String
  userId     String
  acceptedAt DateTime  @default(now())
  Event      Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  User       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([userId])
}

model Notification {
  id         String   @id @default(cuid())
  text       String   @db.VarChar(200)
  notifiedAt DateTime @default(now())
  userId     String
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Message {
  id      String   @id @default(cuid())
  text    String   @db.VarChar(500)
  eventId String
  userId  String
  sentAt  DateTime @default(now())
  Event   Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  User    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([userId])
}

model Organization {
  id                   String         @id @default(cuid())
  title                String         @db.VarChar(60)
  linkCode             String         @unique @db.VarChar(14)
  joinCode             String?        @unique @db.VarChar(14)
  ownerId              String
  parentOrganizationId String?
  events               Event[]
  owner                User           @relation("OwnerOfOrganizations", fields: [ownerId], references: [id], onDelete: Cascade)
  parentOrganization   Organization?  @relation("LinkOrganization", fields: [parentOrganizationId], references: [id], onDelete: Cascade)
  childOrganizations   Organization[] @relation("LinkOrganization")
  admins               User[]         @relation("AdminOfOrganizations")
  members              User[]         @relation("MemberOfOrganizations")
}
